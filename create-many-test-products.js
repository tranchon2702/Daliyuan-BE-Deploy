require('dotenv').config();
const mongoose = require('mongoose');
const Product = require('./src/models/productModel');
const Category = require('./src/models/categoryModel');

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/daliyuan');
    console.log(`MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
};

const createManyProducts = async () => {
  try {
    console.log('üè≠ T·∫°o nhi·ªÅu s·∫£n ph·∫©m test ƒë·ªÉ ki·ªÉm tra pagination...');
    
    // L·∫•y categories
    const categories = await Category.find();
    const banhCategory = categories.find(c => c.name.includes('b√°nh') || c.name.includes('B√°nh'));
    const nuocCategory = categories.find(c => c.name.includes('n∆∞·ªõc') || c.name.includes('N∆∞·ªõc'));
    
    const products = [];
    
    // T·∫°o 20 s·∫£n ph·∫©m b√°nh
    for (let i = 1; i <= 20; i++) {
      products.push({
        name: `B√°nh Test ${i}`,
        nameZh: `ÊµãËØïÈ•ºÂπ≤ ${i}`,
        slug: `banh-test-${i}`,
        code: `BT${i.toString().padStart(3, '0')}`,
        description: `M√¥ t·∫£ b√°nh test s·ªë ${i}`,
        descriptionZh: `ÊµãËØïÈ•ºÂπ≤ÊèèËø∞ ${i}`,
        shortDescription: `B√°nh ngon s·ªë ${i}`,
        shortDescriptionZh: `ÁæéÂë≥È•ºÂπ≤ ${i}`,
        price: Math.floor(Math.random() * 100) + 50,
        mainImage: '/uploads/images/original/placeholder-banh.jpg',
        images: [],
        category: banhCategory?._id || null,
        mainCategory: 'b√°nh',
        stock: Math.floor(Math.random() * 100) + 10,
        isFeatured: i <= 5, // 5 s·∫£n ph·∫©m ƒë·∫ßu l√† featured
        isBestSeller: i <= 7, // 7 s·∫£n ph·∫©m ƒë·∫ßu l√† best seller
        isNewArrival: i <= 3, // 3 s·∫£n ph·∫©m ƒë·∫ßu l√† new arrival
        isMustTry: i <= 4,
        isTrending: i <= 6,
        status: 'C√≤n h√†ng',
        unitOptions: [
          {
            unitType: 'G√≥i',
            price: Math.floor(Math.random() * 50) + 20,
            stock: Math.floor(Math.random() * 50) + 10
          }
        ]
      });
    }
    
    // T·∫°o 15 s·∫£n ph·∫©m n∆∞·ªõc
    for (let i = 1; i <= 15; i++) {
      products.push({
        name: `N∆∞·ªõc Test ${i}`,
        nameZh: `ÊµãËØïÈ•ÆÊñô ${i}`,
        slug: `nuoc-test-${i}`,
        code: `NT${i.toString().padStart(3, '0')}`,
        description: `M√¥ t·∫£ n∆∞·ªõc test s·ªë ${i}`,
        descriptionZh: `ÊµãËØïÈ•ÆÊñôÊèèËø∞ ${i}`,
        shortDescription: `N∆∞·ªõc ngon s·ªë ${i}`,
        shortDescriptionZh: `ÁæéÂë≥È•ÆÊñô ${i}`,
        price: Math.floor(Math.random() * 80) + 30,
        mainImage: '/uploads/images/original/placeholder-nuoc.jpg',
        images: [],
        category: nuocCategory?._id || null,
        mainCategory: 'n∆∞·ªõc',
        stock: Math.floor(Math.random() * 100) + 10,
        isFeatured: i <= 3, // 3 s·∫£n ph·∫©m ƒë·∫ßu l√† featured
        isBestSeller: i <= 5, // 5 s·∫£n ph·∫©m ƒë·∫ßu l√† best seller
        isNewArrival: i <= 2, // 2 s·∫£n ph·∫©m ƒë·∫ßu l√† new arrival
        isMustTry: i <= 3,
        isTrending: i <= 4,
        status: 'C√≤n h√†ng',
        unitOptions: [
          {
            unitType: 'L·ªëc',
            price: Math.floor(Math.random() * 40) + 15,
            stock: Math.floor(Math.random() * 50) + 10
          }
        ]
      });
    }
    
    // Ch√®n v√†o database
    await Product.insertMany(products);
    
    console.log(`‚úÖ ƒê√£ t·∫°o ${products.length} s·∫£n ph·∫©m test!`);
    
    // Th·ªëng k√™
    const stats = await Promise.all([
      Product.countDocuments({}),
      Product.countDocuments({ mainCategory: 'b√°nh' }),
      Product.countDocuments({ mainCategory: 'n∆∞·ªõc' }),
      Product.countDocuments({ isBestSeller: true }),
      Product.countDocuments({ isNewArrival: true }),
      Product.countDocuments({ isFeatured: true })
    ]);
    
    console.log('\nüìä Th·ªëng k√™ sau khi t·∫°o:');
    console.log(`Total products: ${stats[0]}`);
    console.log(`B√°nh: ${stats[1]}`);
    console.log(`N∆∞·ªõc: ${stats[2]}`);
    console.log(`Best sellers: ${stats[3]}`);
    console.log(`New arrivals: ${stats[4]}`);
    console.log(`Featured: ${stats[5]}`);
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o s·∫£n ph·∫©m:', error);
    process.exit(1);
  }
};

connectDB().then(() => {
  createManyProducts();
});
