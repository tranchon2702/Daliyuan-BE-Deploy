const mongoose = require('mongoose');
require('dotenv').config();

// Import models
const Order = require('./src/models/orderModel');
const Product = require('./src/models/productModel');

const createTestOrder = async () => {
  try {
    // Connect to database
    const mongoUri = process.env.MONGO_URI || 'mongodb://localhost:27017/daliyuan';
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connected to MongoDB');

    // Get first product for order
    const product = await Product.findOne();
    if (!product) {
      console.log('‚ùå No products found in database. Please add products first.');
      return;
    }

    console.log('üì¶ Using product:', product.name);

    // Create test order
    const testOrder = new Order({
      user: null, // Guest order
      orderItems: [
        {
          name: product.name,
          qty: 2,
          image: product.mainImage || '/images/default.jpg',
          price: product.price || 50000,
          unitType: 'G√≥i',
          product: product._id,
        },
        {
          name: product.name,
          qty: 1,
          image: product.mainImage || '/images/default.jpg',
          price: product.price || 50000,
          unitType: 'Th√πng',
          product: product._id,
        }
      ],
      shippingInfo: {
        fullName: 'Nguy·ªÖn VƒÉn A',
        email: 'nguyenvana@gmail.com',
        phone: '0901234567',
        province: 'TP. H·ªì Ch√≠ Minh',
        district: 'Qu·∫≠n 1',
        ward: 'Ph∆∞·ªùng B·∫øn Ngh√©',
        address: '123 Nguy·ªÖn Hu·ªá',
        note: 'Giao gi·ªù h√†nh ch√≠nh'
      },
      paymentMethod: 'COD',
      itemsPrice: 150000,
      taxPrice: 0,
      shippingPrice: 0,
      totalPrice: 150000,
      status: 'ƒêang x·ª≠ l√Ω',
      note: 'ƒê∆°n h√†ng test t·ª´ script'
    });

    const savedOrder = await testOrder.save();
    console.log('‚úÖ Test order created successfully!');
    console.log('üìã Order details:');
    console.log(`   Order ID: ${savedOrder._id}`);
    console.log(`   Customer: ${savedOrder.shippingInfo.fullName}`);
    console.log(`   Email: ${savedOrder.shippingInfo.email}`);
    console.log(`   Phone: ${savedOrder.shippingInfo.phone}`);
    console.log(`   Total: ${savedOrder.totalPrice}ƒë`);
    console.log(`   Status: ${savedOrder.status}`);

    // Create another order
    const testOrder2 = new Order({
      user: null,
      orderItems: [
        {
          name: product.name,
          qty: 3,
          image: product.mainImage || '/images/default.jpg',
          price: product.price || 50000,
          unitType: 'G√≥i',
          product: product._id,
        }
      ],
      shippingInfo: {
        fullName: 'Tr·∫ßn Th·ªã B',
        email: 'tranthib@yahoo.com',
        phone: '0987654321',
        province: 'TP. H·ªì Ch√≠ Minh',
        district: 'Qu·∫≠n 3',
        ward: 'Ph∆∞·ªùng V√µ Th·ªã S√°u',
        address: '456 ƒêi·ªán Bi√™n Ph·ªß',
        note: 'G·ªçi tr∆∞·ªõc khi giao'
      },
      paymentMethod: 'Bank Transfer',
      itemsPrice: 150000,
      taxPrice: 0,
      shippingPrice: 30000,
      totalPrice: 180000,
      status: 'ƒê√£ x√°c nh·∫≠n',
      note: 'ƒê∆°n h√†ng test 2'
    });

    const savedOrder2 = await testOrder2.save();
    console.log('‚úÖ Second test order created!');
    console.log(`   Order ID: ${savedOrder2._id}`);
    console.log(`   Customer: ${savedOrder2.shippingInfo.fullName}`);
    console.log(`   Total: ${savedOrder2.totalPrice}ƒë`);

    // Count total orders
    const totalOrders = await Order.countDocuments();
    console.log(`\nüìä Total orders in database: ${totalOrders}`);

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå Disconnected from MongoDB');
  }
};

createTestOrder();
